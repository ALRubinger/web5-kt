# Final step of the release process. Handles:
# * Building from tag and publishing to Maven Central
# * Creating a new "release" in GitHub
#
# This workflow is intended to be triggered either as an event from Artifactory after scanning
# or manually via GitHub UI where you may select a branch, tag, or ref to deploy
name: Publish to Maven Central
on:
  workflow_dispatch:
    inputs:
      versionType:
        description: "Version Type - Major, Minor, Patch, Manual"
        required: true
        default: patch
        type: choice
        options:
          - major
          - minor
          - patch
          - manual
      customVersion:
        description: "Custom Version - Use if Version Type is Manual"
        required: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # https://cashapp.github.io/hermit/usage/ci/
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build, Test, and Deploy to Maven Central
        run: |
          # Maven deploy lifecycle will build, run tests, verify, sign, and deploy
          mvn \
            deploy \
              -P ossrh,sign-artifacts \
              --batch-mode \
              --settings .maven_settings.xml
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SIGN_KEY_PASS: ${{ secrets.GPG_SECRET_PASSPHRASE }}
          SIGN_KEY: ${{ secrets.GPG_SECRET_KEY }}

      - name: Bump tag version
        id: bump_version
        run: |
          VERSION_TYPE=${{ github.event.inputs.versionType }}
          CUSTOM_VERSION=${{ github.event.inputs.customVersion }}
          if [[ "$VERSION_TYPE" == "manual" && -n "$CUSTOM_VERSION" ]]; then
            NEW_TAG=$CUSTOM_VERSION
          elif [[ "$VERSION_TYPE" == "major" || "$VERSION_TYPE" == "minor" ||  "$VERSION_TYPE" == "patch" ]]; then
            npm install -g semver
            LAST_TAG=$(git describe --match "[0-9]*.[0-9]*.[0-9]*" --tags --abbrev=0)
            NEW_TAG=$(semver -i $VERSION_TYPE $LAST_TAG)
          else
            echo "Invalid version type"
            exit 1
          fi
          echo "New version: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Test bumped version
        run: |
          echo ${{ steps.bump_version.outputs.new_tag }}

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   # skips snapshot releases
      #   if: contains(github.event.inputs.version, 'SNAPSHOT') == false
      #   with:
      #     tag_name: v${{ github.event.inputs.version }}
      #     draft: false
      #     prerelease: true
      #     generate_release_notes: true
